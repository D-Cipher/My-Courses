Lambda

Lambda -> Compute Service where you can upload your code and create a lambda function. AWS takes care of provisioning managing the servers that you need to run the code. You don't need to worry about OS, patching, scaling, etc.
- Can be used as an event-driven service where lambda runs in response to events such as: changes in data in a DynamoDB table, uploaded file in S3 bucket, etc. 
- Can be used as a response to HTTP requests via API Gateway or API calls through AWS SDKs. 
- Global service
- Lambda functions are independent, 1 event = 1 function
- Lambda functions can trigger other lambda functions
- AWS X-ray allows you to debug lambda
- The output of lamda print statements are stored in CloudWatch Logs
- Maximum execution runtime for a lambda function is 15mins.

Synchronization -> Supports BOTH synchronous and asynchronous invocation of a Lambda function.

Lambda Scaling -> Lambda scales out it does not scale up. The way it scales is when multiple request are sent to lambda, it will run seperate functions. 

What can trigger Lambda: API Gateway, AWS IoT, ALBs, Cloudwatch, CodeCommit, Cognito, DynamoDB, Kinesis, S3, SNS, SQS

X-Rays -> allows you to debug lambda.

Traditional Architecture -> User sends request to ELB, that then send to web servers, that then communicate with the backend database layer.

Serverless Architecture -> User sends a request to API Gateway that then triggers a lambda function that writes to a serverless database (Aurora / DynamoDB).
- No servers 
- Scales instantly
- Very inexpensive

Pricing based on Number of Requests:
1) Number of Requests -> first 1 million requests are free and $0.20 per 1 million requests there after.
2) Duration -> time your code begins to execute until it returns or terminates. $0.00001667 per GB-second used.

Accessing VCP:
1) Specify VPC subnet IDs
2) Specify VPC security group IDs