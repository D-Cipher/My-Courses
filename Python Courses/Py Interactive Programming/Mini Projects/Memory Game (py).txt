#Implementation of the memory card game Using OBJECTS
#Enjoy the game :)
#Yours, D'Cypher

try:
    import simplegui
except ImportError:
    import SimpleGUICS2Pygame.simpleguics2pygame as simplegui

import random
Cards = []
State = 0
StatusList = []
Hold_index = 0
Val1 = 0
Val2 = 0
Tries = 0

# helper function to initialize globals
def new_game():
    global Cards, Tries
    Cards = list(range(1,9)) + list(range(1,9))
    Tries = 0
    label.set_text("Turns = " + str(Tries))
    random.shuffle(Cards)
    for i in range(16):
        if len(StatusList) == 16:
            StatusList[i] = "Ready"
        else:
            StatusList.append("Ready")

# helper functions
def clear_hold_status():
    clearlist = []
    for i in range(16):
        if StatusList[i] == "Hold":
            StatusList[i] = "Ready"

def set_blackflags():
    if Val1 == Val2:
        for i in range(16):
            if StatusList[i] == "Hold":
                StatusList[i] = "Blackflagged"

# process x & y coordinates to determine if mouseclick is within range.
def card_clicked(mousepos):
    global Hold_index
    x1 = 10
    x2 = 60
    y1 = 10
    y2 = 110
    y_counter = 1

    for i in range(16):
        if mousepos[0] >= x1 and mousepos[0] <= x2:
            if mousepos[1] >= y1 and mousepos[1] <= y2:
                Hold_index = i
                return True

        if y_counter == 4:
            y_counter = 0
            x1 = 10
            x2 = 60
            y1 += 110
            y2 += 110
        else:
            x1 += 60
            x2 += 60
        y_counter += 1
    return False

def mouseclick(pos):
    global State, Val1, Val2, Tries

    # verify click is legal, then adjust according to logic parameters
    if card_clicked(pos):
        if State == 0 and StatusList[Hold_index] != "Blackflagged":
            clear_hold_status()
            StatusList[Hold_index] = "Hold"
            Val1 = Cards[Hold_index]
            State += 1
        else:
            if StatusList[Hold_index] == "Ready":
                StatusList[Hold_index] = "Hold"
                Val2 = Cards[Hold_index]
                set_blackflags()
                State = 0
                Tries += 1
                label.set_text("Turns = " + str(Tries))

# cards are logically 50x100 pixels in size
def draw(canvas):
    x1 = 10
    x2 = 60
    x3 = 15
    y1 = 10
    y2 = 110
    y3 = 85
    card_color = "Green"
    num_color = "White"
    outline_color = "Yellow"
    y_counter = 1

    for i in range(16):
        if StatusList[i] == "Ready":
            card_color = "Green"
            num_color = "Green"
            outline_color = "Yellow"
        elif StatusList[i] == "Hold":
            card_color = "Black"
            num_color = "White"
            outline_color = "Yellow"
        else:
            card_color = "Black"
            num_color = "Gray"
            outline_color = "Gray"

        canvas.draw_polygon([[x1,y1],[x2,y1],[x2,y2],[x1,y2]],1,outline_color, card_color)
        canvas.draw_text(str(Cards[i]), [x3,y3],75,num_color)

        if y_counter == 4:
            y_counter = 0
            x1 = 10
            x2 = 60
            x3 = 15
            y1 += 110
            y2 += 110
            y3 += 110
        else:
            x1 += 60
            x2 += 60
            x3 += 60
        y_counter += 1

# create frame and add a button and labels
frame = simplegui.create_frame("Memory", 250, 450)
frame.add_button("Reset", new_game)
label = frame.add_label("Turns = 0")

# register event handlers
frame.set_mouseclick_handler(mouseclick)
frame.set_draw_handler(draw)

# get things rolling
new_game()
frame.start()
