# program template for Spaceship
import simplegui
import math
import random

# globals for user interface
WIDTH = 800
HEIGHT = 600
score = 0
lives = 3
time = 0
started = False
secondary_weapon = 0
rock_options = [-.07, -.05, -.03, -.03, -.01, -.01, 
                .01, .01, .03, .03, .05, .07]

class ImageInfo:
    def __init__(self, center, size, radius = 0, lifespan = None, animated = False):
        self.center = center
        self.size = size
        self.radius = radius
        if lifespan:
            self.lifespan = lifespan
        else:
            self.lifespan = float('inf')
        self.animated = animated

    def get_center(self):
        return self.center

    def get_size(self):
        return self.size

    def get_radius(self):
        return self.radius

    def get_lifespan(self):
        return self.lifespan

    def get_animated(self):
        return self.animated

    
# art assets created by Kim Lathrop, may be freely re-used in non-commercial projects, please credit Kim
    
# debris images - debris1_brown.png, debris2_brown.png, debris3_brown.png, debris4_brown.png
#                 debris1_blue.png, debris2_blue.png, debris3_blue.png, debris4_blue.png, debris_blend.png
debris_info = ImageInfo([320, 240], [640, 480])
debris_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/debris2_blue.png")

# nebula images - nebula_brown.png, nebula_blue.png
nebula_info = ImageInfo([400, 300], [800, 600])
nebula_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/nebula_blue.f2014.png")

# splash image
splash_info = ImageInfo([200, 150], [400, 300])
splash_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/splash.png")

# ship image
ship_info = ImageInfo([45, 45], [90, 90], 35)
ship_info2 = ImageInfo([45*3, 45], [90, 90], 35)
ship_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/double_ship.png")

# missile image - shot1.png, shot2.png, shot3.png
cannon_info = ImageInfo([5,5], [10, 10], 3, 50)
cannon_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/shot2.png")

missile_info = ImageInfo([8,12], [17, 17], 3, 50)
missile_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/shot3.png")

# asteroid images - asteroid_blue.png, asteroid_brown.png, asteroid_blend.png
asteroid_info = ImageInfo([45, 45], [90, 90], 40)
asteroid_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/asteroid_blue.png")

# animated explosion - explosion_orange.png, explosion_blue.png, explosion_blue2.png, explosion_alpha.png
explosion_info = ImageInfo([64, 64], [128, 128], 17, 24, True)
explosion_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/explosion_alpha.png")

# sound assets purchased from sounddogs.com, please do not redistribute
soundtrack = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/soundtrack.mp3")
cannon_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/missile.mp3")
cannon_sound.set_volume(.5)
ship_thrust_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/thrust.mp3")
explosion_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/explosion.mp3")

# helper functions to handle transformations
def angle_to_vector(ang):
    return [math.cos(ang), math.sin(ang)]

def dist(p,q):
    return math.sqrt((p[0] - q[0]) ** 2+(p[1] - q[1]) ** 2)


# Ship class
class Ship:
    def __init__(self, pos, vel, angle, image, info):
        self.pos = [pos[0], pos[1]]
        self.vel = [vel[0],vel[1]]
        self.thrust = False
        self.drag = False
        self.tilt_l = False
        self.tilt_r = False
        self.angle = angle
        self.angle_vel = 0
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        
    def draw(self,canvas):
        self.thusters_center = [45*3, 45]
        if self.thrust == False: 
            canvas.draw_image(self.image, self.image_center, self.image_size, 
                              self.pos, self.image_size, self.angle)
        elif self.thrust == True:
            canvas.draw_image(self.image, self.thusters_center, self.image_size, 
                              self.pos, self.image_size, self.angle)
        else:
            pass
            
        #canvas.draw_circle(self.pos, self.radius, 1, "White", "White")
        
    def rotate_left(self):
        self.angle += -.5
        self.update()
            
    def rotate_right(self):
        self.angle += .5   
        self.update()
        
    def engage_thrusters(self, logical_input):
        if logical_input == True:
            self.thrust = True
            ship_thrust_sound.play()
        else:
            self.thrust = False
            ship_thrust_sound.pause()
            ship_thrust_sound.rewind()
    
    def engage_drag(self, logical_input):
        if logical_input == True:
            self.drag = True
        else:
            self.drag = False
            
    def tilt_left(self, logical_input):
        if logical_input == True:
            self.tilt_l = True
        else:
            self.tilt_l = False
            
    def tilt_right(self, logical_input):
        if logical_input == True:
            self.tilt_r = True
        else:
            self.tilt_r = False
            
    def deploy_cannon(self):
        global a_cannon
        cannon_pos = [self.pos[0] + angle_to_vector(self.angle)[0]*38,
                      self.pos[1] + angle_to_vector(self.angle)[1]*38]
        cannon_vel = [self.vel[0] + angle_to_vector(self.angle)[0]*8 % WIDTH, 
                      self.vel[1] + angle_to_vector(self.angle)[1]*8 % HEIGHT]
        cannon_angle = self.angle
        a_cannon = Sprite(cannon_pos, cannon_vel, cannon_angle, 0, cannon_image, cannon_info, cannon_sound)
    
    def deploy_missile(self):
        global a_missile1
        missile_pos = [self.pos[0] + angle_to_vector(self.angle)[0]*38,
                      self.pos[1] + angle_to_vector(self.angle)[1]*38]
        missile_vel = [self.vel[0] + angle_to_vector(self.angle)[0]*4 % WIDTH, 
                      self.vel[1] + angle_to_vector(self.angle)[1]*4 % HEIGHT]
        missile_angle = self.angle
        a_missile1 = Sprite(missile_pos, missile_vel, missile_angle, 0, missile_image, missile_info, cannon_sound)
        
        
    def update(self):
        self.pos[0] = (self.pos[0] + self.vel[0]) % WIDTH
        self.pos[1] = (self.pos[1] + self.vel[1]) % HEIGHT
        self.angle += self.angle_vel

        if self.drag == True:
            self.vel[0] += -angle_to_vector(self.angle)[0]*.1
            self.vel[1] += -angle_to_vector(self.angle)[1]*.1
        else:
            self.vel[0] *= (1-.01)
            self.vel[1] *= (1-.01)
            
        if self.thrust == True:
            self.vel[0] += angle_to_vector(self.angle)[0]*.1
            self.vel[1] += angle_to_vector(self.angle)[1]*.1
        else:
            pass
        
        if self.tilt_l == True:
            self.vel[0] += angle_to_vector(self.angle-1.57)[0]*.1
            self.vel[1] += angle_to_vector(self.angle-1.57)[1]*.1
        else:
            pass
        
        if self.tilt_r == True:
            self.vel[0] += angle_to_vector(self.angle+1.57)[0]*.1
            self.vel[1] += angle_to_vector(self.angle+1.57)[1]*.1
        else:
            pass

#Sprite class
class Sprite:
    def __init__(self, pos, vel, ang, ang_vel, image, info, sound = None):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.angle = ang
        self.angle_vel = ang_vel
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        self.lifespan = info.get_lifespan()
        self.animated = info.get_animated()
        self.age = 0
        if sound:
            sound.rewind()
            sound.play()
   
    def draw(self, canvas):
        #canvas.draw_circle(self.pos, self.radius, 1, "Red", "Red")
        canvas.draw_image(self.image, self.image_center, self.image_size, 
                              self.pos, self.image_size, self.angle)
    
    def update(self):
        self.pos[0] = (self.pos[0] + self.vel[0]) % WIDTH
        self.pos[1] = (self.pos[1] + self.vel[1]) % HEIGHT
        self.angle += self.angle_vel
         
def draw(canvas):
    global time, started
    
    # animiate background
    time += 1
    wtime = (time / 4) % WIDTH
    center = debris_info.get_center()
    size = debris_info.get_size()
    canvas.draw_image(nebula_image, nebula_info.get_center(), nebula_info.get_size(), [WIDTH / 2, HEIGHT / 2], [WIDTH, HEIGHT])
    canvas.draw_image(debris_image, center, size, (wtime - WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))
    canvas.draw_image(debris_image, center, size, (wtime + WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))

    # draw UI
    canvas.draw_text("Lives", [50, 50], 22, "White")
    canvas.draw_text("Score", [680, 50], 22, "White")
    canvas.draw_text(str(lives), [50, 80], 22, "White")
    canvas.draw_text(str(score), [680, 80], 22, "White")
    
    # draw ship and sprites
    a_cannon.draw(canvas)
    a_missile1.draw(canvas)
    my_ship.draw(canvas)
    a_rock.draw(canvas)

    # update ship and sprites
    my_ship.update()
    a_rock.update()
    a_cannon.update()
    a_missile1.update()
    
    if not started:
        canvas.draw_image(splash_image, splash_info.get_center(), 
                          splash_info.get_size(), [WIDTH / 2, HEIGHT / 2], 
                          splash_info.get_size())
            
# Spawn Rock
def rock_spawner():
    global rock_options
    a_rock.angle_vel = random.choice(rock_options)
    a_rock.pos[0] = random.randrange(1, WIDTH)
    a_rock.pos[1] = random.randrange(1, HEIGHT)
    
    if abs(a_rock.angle_vel) >= .07:
        a_rock.vel[0] = random.randrange(7,8)*random.choice([-.1, .1])
        a_rock.vel[1] = random.randrange(7,8)*random.choice([-.1, .1])
    elif abs(a_rock.angle_vel) >= .05:
        a_rock.vel[0] = random.randrange(6,8)*random.choice([-.1, .1])
        a_rock.vel[1] = random.randrange(6,8)*random.choice([-.1, .1])
    elif abs(a_rock.angle_vel) >= .03:
        a_rock.vel[0] = random.randrange(3,6)*random.choice([-.1, .1])
        a_rock.vel[1] = random.randrange(3,6)*random.choice([-.1, .1])
    else:
        a_rock.vel[0] = random.randrange(1,4)*random.choice([-.1, .1])
        a_rock.vel[1] = random.randrange(1,4)*random.choice([-.1, .1])

#Key Handlers:        
def keydown(key):
    global secondary_weapon
    
    if (key == simplegui.KEY_MAP["left"] or 
        key == simplegui.KEY_MAP["a"]):
        my_ship.angle_vel=-0.05
    elif (key == simplegui.KEY_MAP["right"] or
          key == simplegui.KEY_MAP["d"]):
        my_ship.angle_vel=0.05
    elif (key == simplegui.KEY_MAP["up"] or
          key == simplegui.KEY_MAP["w"]):
        my_ship.engage_thrusters(True)
    elif (key == simplegui.KEY_MAP["down"] or
          key == simplegui.KEY_MAP["s"] or 
          key == simplegui.KEY_MAP["x"]):
        my_ship.engage_drag(True)
    elif (key == simplegui.KEY_MAP["z"] or
          key == simplegui.KEY_MAP["q"]):
        my_ship.tilt_left(True)
    elif (key == simplegui.KEY_MAP["c"] or
          key == simplegui.KEY_MAP["e"]):
        my_ship.tilt_right(True)
    elif (key == simplegui.KEY_MAP["space"]):
        if secondary_weapon == True:
            my_ship.deploy_missile()
        else:
            my_ship.deploy_cannon()
    elif (key == simplegui.KEY_MAP["1"]):
        secondary_weapon = False
    elif (key == simplegui.KEY_MAP["2"]):
        secondary_weapon = True
    else:
        pass

def keyup(key):
    if (key == simplegui.KEY_MAP["left"] or 
        key == simplegui.KEY_MAP["a"]):
        my_ship.angle_vel=0
    elif (key == simplegui.KEY_MAP["right"] or
          key == simplegui.KEY_MAP["d"]):
        my_ship.angle_vel=0
    elif (key == simplegui.KEY_MAP["up"] or
          key == simplegui.KEY_MAP["w"]):
        my_ship.engage_thrusters(False)
    elif (key == simplegui.KEY_MAP["down"] or
          key == simplegui.KEY_MAP["s"]):
        my_ship.engage_drag(False)
    elif (key == simplegui.KEY_MAP["z"] or
          key == simplegui.KEY_MAP["q"]):
        my_ship.tilt_left(False)
    elif (key == simplegui.KEY_MAP["c"] or
          key == simplegui.KEY_MAP["e"]):
        my_ship.tilt_right(False)
    elif (key == simplegui.KEY_MAP["space"]):
        pass
    elif (key == simplegui.KEY_MAP["1"]):
        pass
    elif (key == simplegui.KEY_MAP["2"]):
        pass
    else:
        pass

def click(pos):
    global started
    center = [WIDTH / 2, HEIGHT / 2]
    size = splash_info.get_size()
    inwidth = (center[0] - size[0] / 2) < pos[0] < (center[0] + size[0] / 2)
    inheight = (center[1] - size[1] / 2) < pos[1] < (center[1] + size[1] / 2)
    if (not started) and inwidth and inheight:
        started = True
        
# initialize frame
frame = simplegui.create_frame("Asteroids", WIDTH, HEIGHT)

# initialize ship and two sprites
my_ship = Ship([WIDTH / 2, HEIGHT / 2], [0, 0], 0, ship_image, ship_info)
a_rock = Sprite([WIDTH / 1.5, HEIGHT / 1.5], [.1, .1], 0, 0.01, asteroid_image, asteroid_info)
rock_spawner()
a_cannon = Sprite([0, 0], [0,0], 0, 0, cannon_image, cannon_info, cannon_sound)
a_missile1 = Sprite([0, 0], [0,0], 0, 0, missile_image, missile_info, cannon_sound)

# register handlers
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.set_mouseclick_handler(click)

timer = simplegui.create_timer(1000.0, rock_spawner)

# get things rolling
timer.start()
frame.start()
