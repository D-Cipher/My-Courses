1. What is the sum of the probabilities associated with the all possible outcomes of a single trial?
  - 1

2. Which term refers to the set of possible outcomes associated with a trial? Review this week's math notes on basic probability if necessary.
 - Sample space

3. You are dealt a single card from a standard deck of 52 playings cards (4 suits with 13 cards in each suit). What is the probability that the card will be of a specific suit?
 - 0.25
 (There are 13 outcomes corresponding to the event. Each outcome has probability 1/52 so the probability of the event is 13/52 which is 0.25.)

def specific_suite():
    '''
    probability that the card will be of a specific suit
    a standard deck of 52 playings cards (4 suits with 13 cards in each suit)
    '''
    return 13 / 52.0

print 'Question 3 answer:', specific_suite()

4. Consider a trial with 36 possible outcomes where each outcome has equal probability. How many outcomes correspond to an event that has probability 1/9?
 - 4 (Four outcomes, each of probability 1/36, yields an event with probability 4/36=1/9.)

def possible_outcomes_36():
    '''
    a trial with possible outcomes where each outcome has equal probability,
    how many outcomes correspond to an event that has probability
    '''
    return 36 * 1/9

print 'Question 4 answer:', possible_outcomes_36()

5. Which Python expressions below simulate a single trial corresponding to the roll of a fair six-sided die whose faces are numbered 1 to 6?
  - random.randrange(6) + 1
  - random.randrange(1, 7)

6. Given a standard deck of 52 cards, what is the probability that two cards chosen at random will have the same rank?
  - 1/17 (There are 3 cards among the 51 cards remaining in the deck that match the rank of the first card.)

7. What is the mean GPA of class where 30% of the students have 4.0 GPA, 40% of the students have a 3.0 GPA and 20% of the students have 2.0 GPA, and 10% of the student have a 1.0 GPA?
  - 2.9

def gpas():
    '''
    a trial with possible outcomes where each outcome has equal probability,
    how many outcomes correspond to an event that has probability
    '''
    return (4.0 * 30 + 3.0 * 40 + 2.0 * 20 + 1.0 * 10) / 100

print 'Question 7 answer:', gpas()


8. Consider a dice game in which you roll two dice. If the sum of the dice is odd, you win $1. If the sum of the dice is even, you lose $1. What is the expected value (in terms of your winnings) of a single roll in this game?
  - The expected value is zero. If I play this game a lot, I expect to break even. (The expected value is zero since the probability of rolling an even sum equals the probability of rolling an odd sum.)

9. What is the expected value of trial(n) as a function of n? (Here, assume that n is a positive integer.) Enter the answer below as a math expression in n.
 - (n - 1)/2

def trial(n):
    '''
    expected value of trial(n) as a function of n
    '''
    val = random.randrange(n)
    return val

print '\nPrep for Question 9 follows...'
print 'when n is 1: ', trial(1)
print 'when n is 10: ', trial(10)
print 'when n is 100: ', trial(100)
print 'when n is 1000: ', trial(1000)

# for n = 10: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9
# thus (0, 1, 2, ..., n - 1) * 1/n
# (where 1/n is probability of each possible outcome)

def total_sum_full(n):
    if n == 0:
        return 0
    return n + total_sum_full(n - 1)

def total_sum_mins(n):
    return (n + 1)/2 * n

print 'for value 99 sum is:', total_sum_mins(99), ', and its expected average is:', total_sum_mins(99) / 100


10. In all of the previous problems, the sample space (space of possible outcomes) had a finite number of outcomes. However, conducting trials where the outcome lies in a continuous space is perfectly reasonable.
Consider that following mystery program. This program uses random.random() to generates a random set of points that are uniformly distributed over the square with corners at (1,1), (-1,1), (1,-1), and (-1,-1). (Here, being uniformly distribution means that each point in the square has an equal chance of being generated.) The method then tests whether these points lie inside a unit circle.

As one increases the number of trials, the value returned by estimate_mystery tends towards a specific value that has a simple expression involving a well-known constant. Enter this value as a math expression below. (Do not enter a floating point number.) You can consult this guide if you would like to see a list of math constants that Coursera's quiz system recognizes.
 - pi/4 (The function returns the ratio of the number of points inside the circle divided by the total number of points. This value corresponds to the ratio of the area of the circle to the area of the square which is p4.)

def inside_unit_circle(point):
    '''
    compute distance of point from origin
    '''
    distance = math.sqrt(point[0] ** 2 + point[1] ** 2)
    return distance < 1
                                                 

def estimate_mystery(num_trials):
    '''
    main function
    '''
    num_inside = 0
    
    for dumm_idx in range(num_trials):
        new_point = [2 * random.random() - 1, 2 * random.random() - 1]
        if inside_unit_circle(new_point):
            num_inside += 1
    
    return float(num_inside) / num_trials

print '\nQuestion 10\'s mystery number:', estimate_mystery(10000)
print 'As compared to pi/4 (4, as there are four quadrants in a circle):', math.pi / 4