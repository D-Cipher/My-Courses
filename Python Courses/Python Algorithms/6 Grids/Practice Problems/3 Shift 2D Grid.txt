'''LeetCode #1260 Shift 2D Grid
Given a 2D grid of size m x n and an integer k. You need to shift the grid k times.

In one shift operation:
Element at grid[i][j] moves to grid[i][j + 1].
Element at grid[i][n - 1] moves to grid[i + 1][0].
Element at grid[m - 1][n - 1] moves to grid[0][0].
Return the 2D grid after applying shift operation k times.

Input: grid = [[1,2,3],[4,5,6],[7,8,9]], k = 1
Output: [[9,1,2],[3,4,5],[6,7,8]]

Input: grid = [[3,8,1,9],[19,7,2,5],[4,6,11,10],[12,0,21,13]], k = 4
Output: [[12,0,21,13],[3,8,1,9],[19,7,2,5],[4,6,11,10]]

Input: grid = [[1,2,3],[4,5,6],[7,8,9]], k = 9
Output: [[1,2,3],[4,5,6],[7,8,9]]

Constraints:
m == grid.length
n == grid[i].length
1 <= m <= 50
1 <= n <= 50
-1000 <= grid[i][j] <= 1000
0 <= k <= 100
'''

from pprint import pprint

grid = [[1,2,3],[4,5,6],[7,8,9]]
k = 4
pprint(grid,width=20)

def dfs(grid):
  result = [[0 for _ in grid[i]] 
          for i in range(len(grid))]

  for y in range(len(grid)):
    for x in range(len(grid[y])):
      if x > 0:
        result[y][x] = grid[y][x-1]
      else:
        if y > 0:
          result[y][x] = grid[y-1][len(grid[y-1])-1]
        else:
          result[y][x] = grid[len(grid)-1][len(grid[y])-1]
  
  return result

def rotation(grid,k):
  if k <= 0:
    return grid

  return rotation(dfs(grid),k-1)

pprint(rotation(grid,k),width=20)




