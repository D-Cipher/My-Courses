'''LeetCode #1351 Count Negative Numbers in a Sorted Matrix
Given a m * n matrix grid which is sorted in non-increasing order both row-wise and column-wise. 

Return the number of negative numbers in grid.

Input: grid = [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]]
Output: 8
Explanation: There are 8 negatives number in the matrix.
Example 2:

Input: grid = [[3,2],[1,0]]
Output: 0
Example 3:

Input: grid = [[1,-1],[-1,-1]]
Output: 3
Example 4:

Input: grid = [[-1]]
Output: 1

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 100
-100 <= grid[i][j] <= 100
'''

from pprint import pprint

grid = [[1,-1,1],[-1,-1,1]]

pprint(grid,width=20)

def dfs(grid,x,y,ans=[],vis=None):
  if vis==None: 
    vis = [[False for _ in grid[i]] 
          for i in range(len(grid))]

  invalidate = (y<0 or x<0 or y>=len(grid) or x>=len(grid[y]))

  if invalidate or vis[y][x] == True:
    return None
  
  vis[y][x] = True
  if grid[y][x] < 0:
    ans.append(grid[y][x])
  
  dfs(grid,x+1,y,ans,vis)
  dfs(grid,x,y+1,ans,vis)

  return ans

print(len(dfs(grid,0,0)))
