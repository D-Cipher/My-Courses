'''LeetCode #64 Minimum Path Sum
Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.
Note: You can only move either down or right at any point in time.
Input:[[1,3,1],[1,5,1],[4,2,1]]
Output: 7
Explanation: Because the path 1,3,1,1,1 minimizes the sum.
'''
from pprint import pprint

grid = [
  [1,3,1],
  [1,5,1],
  [4,2,1]
]

pprint(grid,width=20)

def dfs(grid,x,y,ans=[],vis=None,path=None):
  if vis==None:
    vis = [[False for _ in grid[i]] for i in range(len(grid))]
  if path==None: path=[]

  invalidate = (y<0 or x<0 or y>=len(grid) or x>=len(grid[y]))

  if invalidate or vis[y][x] == True:
    return None

  xmax = len(grid[y])-1; ymax=len(grid)-1
  
  vis[y][x] = True
  npath = path + [grid[y][x]]
  if (x,y) == (xmax,ymax):
    ans.append(tuple(npath))
  dfs(grid,x+1,y,ans,vis,npath)
  dfs(grid,x,y+1,ans,vis,npath)
  vis[y][x] = False

  return ans

allpaths = dfs(grid,0,0)
minpath = min(allpaths,key=sum)

pprint(allpaths,width=80)
print(minpath)