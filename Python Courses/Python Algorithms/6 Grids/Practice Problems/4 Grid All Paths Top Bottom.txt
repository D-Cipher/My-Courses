'''
Find each path from top left to bottom right of a mXn matrix with the constraints that from each cell you can either move only to right or down.
Input: [[1,2,3],[4,5,6]]
Output: [[1,2,3,6],[1,2,5,6],[1,4,5,6]]
'''
from pprint import pprint
grid = [
  [1,2,3],
  [4,5,6]]

pprint(grid,width=20)

def dfs(grid,x,y,ans=[],vis=None,path=None):
  if vis==None:
    vis = [[False for _ in grid[i]] 
        for i in range(len(grid))]
  if path==None: path=[]

  invalidate = (y<0 or x<0 or y>=len(grid) or x>=len(grid[y]))

  if invalidate or vis[y][x]==True: 
    return None
  
  vis[y][x] = True
  npath = path + [grid[y][x]]
  if (x,y) == (len(grid[y])-1, len(grid)-1):
    ans.append(tuple(npath))
  dfs(grid,x+1,y,ans,vis,npath)
  dfs(grid,x,y+1,ans,vis,npath)
  vis[y][x] = False

  return ans

pprint(dfs(grid,0,0),width=20)