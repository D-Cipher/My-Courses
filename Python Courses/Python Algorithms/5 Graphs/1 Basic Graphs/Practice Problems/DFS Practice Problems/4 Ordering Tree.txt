'''LeetCode #897 Increasing Order Search Tree
Given a binary search tree, rearrange the tree in in-order so that the leftmost node in the tree is now the root of the tree, and every node has no left child and only 1 right child.

Example 1:
Input: [5,3,6,2,4,null,8,1,null,null,null,7,9]

       5
      / \
    3    6
   / \    \
  2   4    8
 /        / \ 
1        7   9

Output: [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]

 1
  \
   2
    \
     3
      \
       4
        \
         5
          \
           6
            \
             7
              \
               8
                \
                 9  
 

Constraints:

The number of nodes in the given tree will be between 1 and 100.
Each node will have a unique integer value from 0 to 1000.
'''
from Implementations import Graph # Import graph class created in graph implementations

graph = Graph()
tree = [5,3,6,2,4,None,8,1,None,None,None,7,9]
graph.binaryTree(tree)

print(graph) #{5:[3,6],3:[2,4],6:[8],2:[1],8:[7,9]}

def orderInsert(ls,num):
  if num > ls[-1]:
    ls.append(num)
  else:
    for i in range(len(ls)):
      if ls[i] >= num:
        ls.insert(i,num)
        break

def dfs(graph,node,ans=[],vis=None):
  if vis==None: vis=set([]); ans.append(node)

  branch = graph[node]

  for b in branch:
    if b not in vis:
      vis.add(b)
      orderInsert(ans,b)
      dfs(graph,b,ans,vis)
  return ans

tree = dfs(graph,5)
ntree = []

for i in range(len(tree)):
  ntree.append(tree[i])
  ntree.append(None)

print(ntree)


