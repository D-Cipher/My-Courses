'''LeetCode #112 Path Sum
Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.

Note: A leaf is a node with no children.

Given the below binary tree and sum = 22,

      5
     / \
    4   8
   /   / \
  11  13  14
 /  \      \
7    2      1
return true, as there exist a root-to-leaf path 5->4->11->2 which sum is 22.
'''
from collections import defaultdict

graph = defaultdict(list,{5:[4,8],4:[11],11:[7,20],8:[13,14],14:[1]})

print(graph)

def dfs(graph,node,target,vis=None,path=None):
  if vis==None: vis=set([])
  if path==None: path=[node]
  
  if sum(path) == target:
    return True

  branch = graph[node]

  for b in branch:
    if b not in vis:
      vis.add(b)
      npath = path + [b]
      found = dfs(graph,b,target,vis,npath)
      if found:
        return True

  return False

print(dfs(graph,5,22))
