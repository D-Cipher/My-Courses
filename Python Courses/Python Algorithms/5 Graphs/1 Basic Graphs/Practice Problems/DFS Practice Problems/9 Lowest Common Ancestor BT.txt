'''LeetCode #236 Lowest Common Ancestor of a Binary Tree

Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”

Given the following binary tree:  root = [3,5,1,6,2,0,8,null,null,7,4]

     3
   /   \
  5     1
 / \   / \
6   2 0   8
   / \
  7   4
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
Output: 3
Explanation: The LCA of nodes 5 and 1 is 3.

Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
Output: 5
Explanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.
'''

from Implementations import Graph # Import graph class created in graph implementations

graph = Graph()
tree = [3,5,1,6,2,0,8,null,null,7,4]
graph.binaryTree(tree)
print(graph) #{3:[5,1],5:[6,2],2:[7,4],1:[0,8]}

def dfs(graph,node,x,y,ans=[],vis=None,path=None):
  if vis == None: vis=set([])
  if path == None: path=[node]

  branch = graph[node]

  for b in branch:
    if b not in vis:
      vis.add(b)
      npath = path + [b]
      if b==x or b==y:
        ans.append(tuple(npath))

      dfs(graph,b,x,y,ans,vis,npath)

  return ans

paths = dfs(graph,3,6,4)
ca = []

for num in paths[0]:
  if num in paths[1]:
    ca.append(num)

lca = ca[-1]

print(lca)