'''
Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.
 

Example:

MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin();   --> Returns -3.
minStack.pop();
minStack.top();      --> Returns 0.
minStack.getMin();   --> Returns -2.
'''

class MinStack:

    def __init__(self):
      self.st = []

    def push(self, x: int) -> str:
      self.st.append(x)
      return 'Pushed ' + str(x)

    def pop(self) -> int:
      if len(self.st) > 0:
        return self.st.pop()
      else:
        return None

    def top(self) -> int:
      if len(self.st) > 0:
        return self.st[-1]
      else:
        return None

    def getMin(self) -> int:
      if len(self.st) > 0:
        return min(self.st)
      else:
        return None


minStack = MinStack();
print(minStack.push(-2))
print(minStack.push(0))
print(minStack.push(-3))
print(minStack.getMin())   #--> Returns -3.
print(minStack.pop())
print(minStack.top())      #--> Returns 0.
print(minStack.getMin())   #--> Returns -2.