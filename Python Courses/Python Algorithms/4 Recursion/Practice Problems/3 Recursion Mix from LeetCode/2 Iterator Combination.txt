'''LeetCode #1286 Iterator for Combination
Design an Iterator class, which has:
A constructor that takes a string characters of sorted distinct lowercase English letters and a number combinationLength as arguments.
A function next() that returns the next combination of length combinationLength in lexicographical order.
A function hasNext() that returns True if and only if there exists a next combination.
 
Example:
CombinationIterator iterator = new CombinationIterator("abc", 2); // creates the iterator.

iterator.next(); // returns "ab"
iterator.hasNext(); // returns true
iterator.next(); // returns "ac"
iterator.hasNext(); // returns true
iterator.next(); // returns "bc"
iterator.hasNext(); // returns false
'''

class CombinationIterator:

  def __init__(self,chars,k):
    self.s = chars
    self.k = k
    self.counter = 0
    self.combols = self.dfs(chars,k)

  def dfs(self,chars,k,ans=[],cur='',index=0):
    for i in range(index,len(chars)):
      ncur = cur + chars[i]
      if ncur.count(chars[i]) <= chars.count(chars[i]):
        if len(ncur) == k:
          ans.append(ncur)
        self.dfs(chars,k,ans,ncur,i)
    return ans

  def next(self):
    if self.counter <= len(self.combols)-1:
      result = self.combols[self.counter]
      self.counter += 1
    else:
      self.counter = 0
      result = self.combols[self.counter]
    
    return result

  def hasNext(self):
    if self.counter <= len(self.combols)-1:
      return True
    return False

ic = CombinationIterator('abc', 2)
print(ic.combols)
print(ic.next())
print(ic.hasNext())
print(ic.next())
print(ic.hasNext())
print(ic.next())
print(ic.hasNext())
print(ic.next())
