'''Source: LeetCode #131 Palindrome Partitioning
Given a string s, partition s such that every substring of the partition is a palindrome.

Return all possible palindrome partitioning of s.

Example:

Input: "aab"
Output: [["aa","b"],["a","a","b"]]
'''

chars = 'aab'

def isPalap(chars):
  return chars == chars[::-1]

def dfs(chars,nchars=None,ans=[],cur=[]):
  if nchars==None: nchars = chars

  for i in range(1,len(nchars)+1):
    if isPalap(nchars[:i]):
      cur.append(nchars[:i])
      if ''.join(cur) == chars:
        ans.append(cur.copy())
      dfs(chars,nchars[i:],ans,cur)
      cur.pop()

  return ans

print(dfs(chars))