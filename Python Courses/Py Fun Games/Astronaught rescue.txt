# implementation of Spaceship - program template for RiceRocks
import simplegui
import math
import random
import urllib2

# globals for user interface
WIDTH = 800
HEIGHT = 600
score = 0
lives = 3
spacemen_killed = 0
spacemen_rescued = 0
time = 0
started = False

class ImageInfo:
    def __init__(self, center, size, radius = 0, lifespan = None, animated = False, animation_width = 0, animation_frame_rate = 1):
        self.center = center
        self.size = size
        self.radius = radius
        self.animation_width = animation_width
        self.animation_frame_rate = animation_frame_rate
        if lifespan:
            self.lifespan = lifespan
        else:
            self.lifespan = float('inf')
        self.animated = animated

    def get_center(self):
        return self.center

    def get_size(self):
        return self.size

    def get_radius(self):
        return self.radius

    def get_lifespan(self):
        return self.lifespan

    def get_animated(self):
        return self.animated

    
# art assets created by Kim Lathrop, may be freely re-used in non-commercial projects, please credit Kim
    
# debris images - debris1_brown.png, debris2_brown.png, debris3_brown.png, debris4_brown.png
#                 debris1_blue.png, debris2_blue.png, debris3_blue.png, debris4_blue.png, debris_blend.png
debris_info = ImageInfo([320, 240], [640, 480])
debris_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/debris2_blue.png")

# nebula images - nebula_brown.png, nebula_blue.png
nebula_info = ImageInfo([400, 300], [800, 600])
nebula_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/nebula_blue.f2014.png")

# splash image
splash_info = ImageInfo([200, 150], [400, 300])
splash_image = simplegui.load_image("http://i.imgur.com/DZkZjmD.png")

# tcsplash image
tcsplash_info = ImageInfo([200, 250], [400, 500])
tcsplash_image = simplegui.load_image("http://i.imgur.com/fztoS1o.png")

# ship image
ship_info = ImageInfo([45, 45], [90, 90], 35)
ship_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/double_ship.png")

# missile image - shot1.png, shot2.png, shot3.png
missile_info = ImageInfo([5,5], [10, 10], 3, 50)
missile_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/shot2.png")

# asteroid images - asteroid_blue.png, asteroid_brown.png, asteroid_blend.png
asteroid_info = ImageInfo([45, 45], [90, 90], 40)
asteroid_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/asteroid_blue.png")

# animated explosion - explosion_orange.png, explosion_blue.png, explosion_blue2.png, explosion_alpha.png
explosion_info = ImageInfo([64, 64], [128, 128], 17, 24, True)
explosion_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/explosion_alpha.png")

spaceman_info = ImageInfo([16, 16], [32, 32], 12, random.randrange(180, 360), 
                          True, animation_width = 96, animation_frame_rate = 10)
spaceman_image = simplegui.load_image("http://imageshack.us/scaled/landing/836/astronaut.png")

# sound assets purchased from sounddogs.com, please do not redistribute
# .ogg versions of sounds are also available, just replace .mp3 by .ogg
soundtrack = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/soundtrack.mp3")
missile_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/missile.mp3")
missile_sound.set_volume(.5)
ship_thrust_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/thrust.mp3")
explosion_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/explosion.mp3")

# helper functions to handle transformations
def angle_to_vector(ang):
    return [math.cos(ang), math.sin(ang)]

def dist(p, q):
    return math.sqrt((p[0] - q[0]) ** 2 + (p[1] - q[1]) ** 2)


# Ship class
class Ship:

    def __init__(self, pos, vel, angle, image, info):
        self.pos = [pos[0], pos[1]]
        self.vel = [vel[0], vel[1]]
        self.thrust = False
        self.angle = angle
        self.angle_vel = 0
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        
    def draw(self,canvas):
        if self.thrust:
            canvas.draw_image(self.image, [self.image_center[0] + self.image_size[0], self.image_center[1]] , self.image_size,
                              self.pos, self.image_size, self.angle)
        else:
            canvas.draw_image(self.image, self.image_center, self.image_size,
                              self.pos, self.image_size, self.angle)
        # canvas.draw_circle(self.pos, self.radius, 1, "White", "White")

    def update(self):
        # update angle
        self.angle += self.angle_vel
        
        # update position
        self.pos[0] = (self.pos[0] + self.vel[0]) % WIDTH
        self.pos[1] = (self.pos[1] + self.vel[1]) % HEIGHT

        # update velocity
        if self.thrust:
            acc = angle_to_vector(self.angle)
            self.vel[0] += acc[0] * .15
            self.vel[1] += acc[1] * .15
            
        self.vel[0] *= .98
        self.vel[1] *= .98
        return self

    def set_thrust(self, on):
        self.thrust = on
        if on:
            ship_thrust_sound.rewind()
            ship_thrust_sound.play()
        else:
            ship_thrust_sound.pause()
       
    def increment_angle_vel(self):
        self.angle_vel += .07
        
    def decrement_angle_vel(self):
        self.angle_vel -= .07
        
    def shoot(self):
        global missiles
        forward = angle_to_vector(self.angle)
        missile_pos = [self.pos[0] + self.radius * forward[0], self.pos[1] + self.radius * forward[1]]
        missile_vel = [self.vel[0] + 8 * forward[0], self.vel[1] + 8 * forward[1]]
        missiles.add(Sprite(missile_pos, missile_vel, self.angle, 0, missile_image, missile_info, missile_sound))
    
    
    
# Sprite class
class Sprite:
    def __init__(self, pos, vel, ang, ang_vel, image, info, sound = None):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.angle = ang
        self.angle_vel = ang_vel
        self.image = image
        self.image_center = list(info.get_center())
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        self.lifespan = info.get_lifespan()
        self.animated = info.get_animated()
        self.animation_frame_rate = info.animation_frame_rate
        self.animation_width = info.animation_width
        self.age = 0
        if sound:
            sound.rewind()
            sound.play()
   
    def draw(self, canvas):
        canvas.draw_image(self.image, self.image_center, self.image_size,
                          self.pos, self.image_size, self.angle)

    def update(self):
        # update angle
        self.angle += self.angle_vel
        
        # update position
        self.pos[0] = (self.pos[0] + self.vel[0]) % WIDTH
        self.pos[1] = (self.pos[1] + self.vel[1]) % HEIGHT
        
        self.age += 1
        6
        if self.animated and self.age % self.animation_frame_rate == 0:
            self.image_center[0] += self.image_size[0]
            if self.animation_width:
                self.image_center[0] %= self.animation_width
            
        return self
  
    def is_dead(self):
        return self.age > self.lifespan
    
    def collides(self, other):
        return dist(self.pos, other.pos) <= self.radius + other.radius
        
# key handlers to control ship   
def keydown(key):
    if key == simplegui.KEY_MAP['left']:
        my_ship.decrement_angle_vel()
    elif key == simplegui.KEY_MAP['right']:
        my_ship.increment_angle_vel()
    elif key == simplegui.KEY_MAP['up']:
        my_ship.set_thrust(True)
    elif key == simplegui.KEY_MAP['space']:
        my_ship.shoot()
        
def keyup(key):
    if key == simplegui.KEY_MAP['left']:
        my_ship.increment_angle_vel()
    elif key == simplegui.KEY_MAP['right']:
        my_ship.decrement_angle_vel()
    elif key == simplegui.KEY_MAP['up']:
        my_ship.set_thrust(False)
        
# mouseclick handlers that reset UI and conditions whether splash image is drawn
def click(pos):
    global started, score, lives, rocks, missiles, explosions, spacemen, spacemen_killed, spacemen_rescued
    center = [WIDTH / 2, HEIGHT / 2]
    size = tcsplash_info.get_size()
    inwidth = (center[0] - size[0] / 2) < pos[0] < (center[0] + size[0] / 2)
    inheight = (center[1] - size[1] / 2) < pos[1] < (center[1] + size[1] / 2)
    if (not started) and inwidth and inheight:
        started = True
        score = 0
        lives = 3
        spacemen_killed = 0
        spacemen_rescued = 0
        rocks = set()
        missiles = set()
        explosions = set()
        spacemen = set()
        soundtrack.rewind()
        soundtrack.play()
        my_ship.pos = center
        my_ship.angle = -math.pi/2
        my_ship.vel = [0, 0]

# draw helpers
def process_sprites(canvas, sprites):
    for sprite in list(sprites):
        if sprite.is_dead():
            sprites.discard(sprite)
        else:
            sprite.update().draw(canvas)

def spacemen_collide(obj):
    for spaceman in list(spacemen):
        if spaceman.collides(obj):
            spacemen.discard(spaceman)
            return True
        
def rocks_collide(obj):
    for rock in list(rocks):
        if rock.collides(obj):
            rocks.discard(rock)
            explosions.add(Sprite(rock.pos, rock.vel, rock.angle, rock.angle_vel, 
                                      explosion_image, explosion_info, explosion_sound))
            return True
    return False

def get_scores(url):
    global score_list, rank
    f = urllib2.urlopen(url).read().split(',')[::-1]
    
    score_list = []
    r = 1
    while len(f) > 1:
        score_list.append([r, f.pop(), f.pop()])
        r += 1
    score_list += [[], []]
    rank = int(f.pop()) + 1
    
def ranking():
    last_digit = rank % 10
    return str(rank + 1) + {1: 'st', 2: 'nd', 3: 'rd'}.get(rank, 'th')


def draw_score(canvas, s, top, fontsize):
    if len(s) == 0: return
    t = str(s[0]).rjust(3) + ' ' + s[2][0:26].ljust(26) + str(s[1]).rjust(6)
    w = frame.get_canvas_textwidth(t, fontsize, "monospace")
    canvas.draw_text(t, [(WIDTH - w)/2, top], fontsize, "White", "monospace")

def draw(canvas):
    global time, started, lives, score, spacemen_rescued, spacemen_killed, score_list, rank
    
    # animiate background
    time += 1
    wtime = (time / 4) % WIDTH
    center = debris_info.get_center()
    size = debris_info.get_size()
    canvas.draw_image(nebula_image, nebula_info.get_center(), nebula_info.get_size(), [WIDTH / 2, HEIGHT / 2], [WIDTH, HEIGHT])
    canvas.draw_image(debris_image, center, size, (wtime - WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))
    canvas.draw_image(debris_image, center, size, (wtime + WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))

    # draw UI
    player = inp.get_text()
    if player == "":
        player = "Anonymous"
    canvas.draw_text("Player: " + player, [WIDTH/2 - 60, 20], 18, "Blue")
    canvas.draw_text("Lives " + str(lives), [10, 20], 18, "White")
    canvas.draw_text("Score " + str(score), [WIDTH - 120, 20], 18, "White")
    canvas.draw_text("men rescued " + str(spacemen_rescued), [WIDTH - 120, 40], 16, "White")
    canvas.draw_text("men killed " + str(spacemen_killed), [WIDTH - 120, 60], 16, "Red")
    
    # draw and update ship and sprites
    if started:
        my_ship.update().draw(canvas)
        if rocks_collide(my_ship):
            lives -= 1
            if lives == 0:
                started = False
                get_scores("http://scores-1031.appspot.com/ricerocks.txt?score="+str(score)+"&name="+player)
                time = 0
                
        if spacemen_collide(my_ship):
            spacemen_rescued += 1
            score += 5
            if spacemen_rescued % 3 == 0:
                lives += 1

        for missile in list(missiles):
            if rocks_collide(missile):
                score += 1
                missiles.discard(missile)
            if spacemen_collide(missile):
                spacemen_killed += 1
                score -= 10

        for sprites in [rocks, missiles, explosions, spacemen]:
            process_sprites(canvas, sprites)

    # draw splash screen if not started
    else:
        canvas.draw_image(tcsplash_image, tcsplash_info.get_center(), 
                          tcsplash_info.get_size(), [WIDTH / 2, HEIGHT / 2], 
                          tcsplash_info.get_size())
        top = 200
        show_cnt = 18
        if rank > 0:
            canvas.draw_text("Congratulations! Your score of " + str(score) + " ranked " + ranking(),
                             [210, top], 20, "White")
            top += 28
            show_cnt -= 1
        
        scroll_progress = (time - 100) / 5
        if scroll_progress < 0: scroll_progress = 0
        start_index = (scroll_progress/18) % len(score_list)
        t = scroll_progress % 18
        top -= t
        draw_score(canvas, score_list[start_index], top, 15 - t * 15 / 18)
        start_index += 1
        scores = score_list[start_index: start_index + show_cnt]
        if len(scores) < show_cnt:
            scores += score_list[0:show_cnt - len(scores)]
        top += 18
        
        for s in scores:
            draw_score(canvas, s, top, 15)
            top += 18


# timer handler that spawns a rock    
def spawn_sprite(image, info):
    global rocks
    pos = [random.randrange(0, WIDTH), random.randrange(0, HEIGHT)]
    while dist(pos, my_ship.pos) <= 100:
        pos = [random.randrange(0, WIDTH), random.randrange(0, HEIGHT)]
        
    svel = random.random() * (1 + score/50) + 1
    angle = random.random() * math.pi * 2
    direction = angle_to_vector(angle)
    vel = [svel * direction[0], svel * direction[1]]
    avel = random.random() * .2 - .1
    return Sprite(pos, vel, angle, avel, image, info)

# timer handler that spawns a spaceman    
def spawner():
    global spacemen
    if not started: return
    if len(spacemen) <= 3 and random.random() < 0.2:
        spacemen.add(spawn_sprite(spaceman_image, spaceman_info))
        
    if len(rocks) <= 12 and random.random() < 0.5:
        rocks.add(spawn_sprite(asteroid_image, asteroid_info))
            
# initialize stuff
frame = simplegui.create_frame("Asteroids", WIDTH, HEIGHT)

# initialize ship and two sprites
my_ship = Ship([WIDTH / 2, HEIGHT / 2], [0, 0], 0, ship_image, ship_info)
rocks = set()
missiles = set()
explosions = set()
spacemen = set()

def input_handler(text):
    pass

# register handlers
frame.set_keyup_handler(keyup)
frame.set_keydown_handler(keydown)
frame.set_mouseclick_handler(click)
frame.set_draw_handler(draw)
inp = frame.add_input('Enter your name here to record your top score:', input_handler, 100)

timer = simplegui.create_timer(1000.0, spawner)
                           
# get things rolling
get_scores("http://scores-1031.appspot.com/ricerocks.txt")
timer.start()
frame.start()
